'use strict';
//this file was generated by serviser-sdk plugin

var ServiceSDK = module.require('serviser-sdk').ServiceSDK;

module.exports = Bowling_bowling_SDK_v1_0;


/**
 * @constructor
 * @name Bowling_bowling_SDK_v1_0
 */
function Bowling_bowling_SDK_v1_0(options) {
    options = options || {};

    if (!options.baseURL) {
        options.baseURL = "http://127.0.0.1:3002";
    }

    this.version = "v1.0";
    options.baseURL += "/api/v1.0";

    //options object must be ready before we call the parent constructor
    ServiceSDK.call(this, options);
}

Bowling_bowling_SDK_v1_0.prototype = Object.create(ServiceSDK.prototype);
Bowling_bowling_SDK_v1_0.prototype.constructor = Bowling_bowling_SDK_v1_0;

/**
 * @method
 * @name Bowling_bowling_SDK_v1_0#setFrameThrowScore
 * @operationId postFramesThrow_v1.0
 * @summary save player's score per frame per throw
 *
 * @param {integer} [id]
 * @param {integer} [score]
 * @param {Object} options
 * @param {Object} options.data - request body payload in case of PUT|POST|DELETE, query parameters otherwise
 * @param {Object} [options.query]
 * @param {Object} [options.headers]
 * @param {string} [options.headers.content-type]
 * @param {Object} options.path
 * @param {integer} [options.path.id]
 * @param {integer} [options.path.score]
 * @return {Promise<Object>}
 */
Bowling_bowling_SDK_v1_0.prototype.setFrameThrowScore = function setFrameThrowScore(id, score, options) {

    if (typeof id === 'object' && id !== null && typeof options === 'undefined') {
        options = id;
        id = undefined;
    }

    if (typeof id === 'undefined') {
        id = options && options.path && options.path['id'];
    }
    if (typeof score === 'object' && score !== null && typeof options === 'undefined') {
        options = score;
        score = undefined;
    }

    if (typeof score === 'undefined') {
        score = options && options.path && options.path['score'];
    }

    var opt = {
        url     : "/frames/{id}/throw/{score}",
        method  : "post",
        data    : (options && options.data) !== undefined ? options.data : {},
        params  : (options && options.query) !== undefined ? options.query : {},
        headers : (options && options.headers) !== undefined ? options.headers : {}
    };

    opt.url = opt.url.replace(/{id}/, id);
    opt.url = opt.url.replace(/{score}/, score);

    return this.$request(opt);
};
/**
 * @method
 * @name Bowling_bowling_SDK_v1_0#createGame
 * @operationId postGames_v1.0
 * @summary create a new game
 *
 * @param {Object} options
 * @param {Object} options.data - request body payload in case of PUT|POST|DELETE, query parameters otherwise
 * @param {Object} [options.query]
 * @param {Object} [options.headers]
 * @param {string} [options.headers.content-type]
 * @param {Object} options.path
 * @return {Promise<Object>}
 */
Bowling_bowling_SDK_v1_0.prototype.createGame = function createGame(options) {


    var opt = {
        url     : "/games",
        method  : "post",
        data    : (options && options.data) !== undefined ? options.data : {},
        params  : (options && options.query) !== undefined ? options.query : {},
        headers : (options && options.headers) !== undefined ? options.headers : {}
    };


    return this.$request(opt);
};
/**
 * @method
 * @name Bowling_bowling_SDK_v1_0#getGames
 * @operationId getGames_v1.0
 * @summary find games
 *
 * @param {Object} options
 * @param {Object} options.data - request body payload in case of PUT|POST|DELETE, query parameters otherwise
 * @param {Object} [options.query]
 * @param {Object} [options.headers]
 * @param {Object} options.path
 * @return {Promise<Object>}
 */
Bowling_bowling_SDK_v1_0.prototype.getGames = function getGames(options) {


    var opt = {
        url     : "/games",
        method  : "get",
        data    : (options && options.data) !== undefined ? options.data : {},
        params  : (options && options.query) !== undefined ? options.query : {},
        headers : (options && options.headers) !== undefined ? options.headers : {}
    };


    return this.$request(opt);
};
/**
 * @method
 * @name Bowling_bowling_SDK_v1_0#getGame
 * @operationId getGame_v1.0
 * @summary get game
 *
 * @param {integer} [id]
 * @param {Object} options
 * @param {Object} options.data - request body payload in case of PUT|POST|DELETE, query parameters otherwise
 * @param {Object} [options.query]
 * @param {Object} [options.headers]
 * @param {Object} options.path
 * @param {integer} [options.path.id]
 * @return {Promise<Object>}
 */
Bowling_bowling_SDK_v1_0.prototype.getGame = function getGame(id, options) {

    if (typeof id === 'object' && id !== null && typeof options === 'undefined') {
        options = id;
        id = undefined;
    }

    if (typeof id === 'undefined') {
        id = options && options.path && options.path['id'];
    }

    var opt = {
        url     : "/games/{id}",
        method  : "get",
        data    : (options && options.data) !== undefined ? options.data : {},
        params  : (options && options.query) !== undefined ? options.query : {},
        headers : (options && options.headers) !== undefined ? options.headers : {}
    };

    opt.url = opt.url.replace(/{id}/, id);

    return this.$request(opt);
};
/**
 * @method
 * @name Bowling_bowling_SDK_v1_0#createGamePlayer
 * @operationId postGamesPlayers_v1.0
 * @summary create a new player
 *
 * @param {integer} [id]
 * @param {Object} options
 * @param {Object} options.data - request body payload in case of PUT|POST|DELETE, query parameters otherwise
 * @param {Object} [options.query]
 * @param {Object} [options.headers]
 * @param {string} [options.headers.content-type]
 * @param {Object} options.path
 * @param {integer} [options.path.id]
 * @return {Promise<Object>}
 */
Bowling_bowling_SDK_v1_0.prototype.createGamePlayer = function createGamePlayer(id, options) {

    if (typeof id === 'object' && id !== null && typeof options === 'undefined') {
        options = id;
        id = undefined;
    }

    if (typeof id === 'undefined') {
        id = options && options.path && options.path['id'];
    }

    var opt = {
        url     : "/games/{id}/players",
        method  : "post",
        data    : (options && options.data) !== undefined ? options.data : {},
        params  : (options && options.query) !== undefined ? options.query : {},
        headers : (options && options.headers) !== undefined ? options.headers : {}
    };

    opt.url = opt.url.replace(/{id}/, id);

    return this.$request(opt);
};
/**
 * @method
 * @name Bowling_bowling_SDK_v1_0#getGamesPlayers
 * @operationId getGamesPlayers_v1.0
 * @summary find players
 *
 * @param {integer} [id]
 * @param {Object} options
 * @param {Object} options.data - request body payload in case of PUT|POST|DELETE, query parameters otherwise
 * @param {Object} [options.query]
 * @param {Object} [options.headers]
 * @param {Object} options.path
 * @param {integer} [options.path.id]
 * @return {Promise<Object>}
 */
Bowling_bowling_SDK_v1_0.prototype.getGamesPlayers = function getGamesPlayers(id, options) {

    if (typeof id === 'object' && id !== null && typeof options === 'undefined') {
        options = id;
        id = undefined;
    }

    if (typeof id === 'undefined') {
        id = options && options.path && options.path['id'];
    }

    var opt = {
        url     : "/games/{id}/players",
        method  : "get",
        data    : (options && options.data) !== undefined ? options.data : {},
        params  : (options && options.query) !== undefined ? options.query : {},
        headers : (options && options.headers) !== undefined ? options.headers : {}
    };

    opt.url = opt.url.replace(/{id}/, id);

    return this.$request(opt);
};
/**
 * @method
 * @name Bowling_bowling_SDK_v1_0#getGamesFrames
 * @operationId getGamesFrames_v1.0
 * @summary find frames
 *
 * @param {integer} [id]
 * @param {Object} options
 * @param {Object} options.data - request body payload in case of PUT|POST|DELETE, query parameters otherwise
 * @param {Object} [options.query]
 * @param {Object} [options.headers]
 * @param {Object} options.path
 * @param {integer} [options.path.id]
 * @return {Promise<Object>}
 */
Bowling_bowling_SDK_v1_0.prototype.getGamesFrames = function getGamesFrames(id, options) {

    if (typeof id === 'object' && id !== null && typeof options === 'undefined') {
        options = id;
        id = undefined;
    }

    if (typeof id === 'undefined') {
        id = options && options.path && options.path['id'];
    }

    var opt = {
        url     : "/games/{id}/frames",
        method  : "get",
        data    : (options && options.data) !== undefined ? options.data : {},
        params  : (options && options.query) !== undefined ? options.query : {},
        headers : (options && options.headers) !== undefined ? options.headers : {}
    };

    opt.url = opt.url.replace(/{id}/, id);

    return this.$request(opt);
};
/**
 * @method
 * @name Bowling_bowling_SDK_v1_0#createGameFrame
 * @operationId postGamesFrames_v1.0
 * @summary create a new frame
 *
 * @param {integer} [id]
 * @param {Object} options
 * @param {Object} options.data - request body payload in case of PUT|POST|DELETE, query parameters otherwise
 * @param {Object} [options.query]
 * @param {Object} [options.headers]
 * @param {string} [options.headers.content-type]
 * @param {Object} options.path
 * @param {integer} [options.path.id]
 * @return {Promise<Object>}
 */
Bowling_bowling_SDK_v1_0.prototype.createGameFrame = function createGameFrame(id, options) {

    if (typeof id === 'object' && id !== null && typeof options === 'undefined') {
        options = id;
        id = undefined;
    }

    if (typeof id === 'undefined') {
        id = options && options.path && options.path['id'];
    }

    var opt = {
        url     : "/games/{id}/frames",
        method  : "post",
        data    : (options && options.data) !== undefined ? options.data : {},
        params  : (options && options.query) !== undefined ? options.query : {},
        headers : (options && options.headers) !== undefined ? options.headers : {}
    };

    opt.url = opt.url.replace(/{id}/, id);

    return this.$request(opt);
};
/**
 * @method
 * @name Bowling_bowling_SDK_v1_0#getGamesFrame
 * @operationId getGamesFrame_v1.0
 * @summary get frame
 *
 * @param {integer} [game_id]
 * @param {integer} [frame_id]
 * @param {Object} options
 * @param {Object} options.data - request body payload in case of PUT|POST|DELETE, query parameters otherwise
 * @param {Object} [options.query]
 * @param {Object} [options.headers]
 * @param {Object} options.path
 * @param {integer} [options.path.game_id]
 * @param {integer} [options.path.frame_id]
 * @return {Promise<Object>}
 */
Bowling_bowling_SDK_v1_0.prototype.getGamesFrame = function getGamesFrame(game_id, frame_id, options) {

    if (typeof game_id === 'object' && game_id !== null && typeof options === 'undefined') {
        options = game_id;
        game_id = undefined;
    }

    if (typeof game_id === 'undefined') {
        game_id = options && options.path && options.path['game_id'];
    }
    if (typeof frame_id === 'object' && frame_id !== null && typeof options === 'undefined') {
        options = frame_id;
        frame_id = undefined;
    }

    if (typeof frame_id === 'undefined') {
        frame_id = options && options.path && options.path['frame_id'];
    }

    var opt = {
        url     : "/games/{game_id}/frames/{frame_id}",
        method  : "get",
        data    : (options && options.data) !== undefined ? options.data : {},
        params  : (options && options.query) !== undefined ? options.query : {},
        headers : (options && options.headers) !== undefined ? options.headers : {}
    };

    opt.url = opt.url.replace(/{game_id}/, game_id);
    opt.url = opt.url.replace(/{frame_id}/, frame_id);

    return this.$request(opt);
};
/**
 * @method
 * @name Bowling_bowling_SDK_v1_0#getPlayer
 * @operationId getPlayer_v1.0
 * @summary get player
 *
 * @param {integer} [id]
 * @param {Object} options
 * @param {Object} options.data - request body payload in case of PUT|POST|DELETE, query parameters otherwise
 * @param {Object} [options.query]
 * @param {Object} [options.headers]
 * @param {Object} options.path
 * @param {integer} [options.path.id]
 * @return {Promise<Object>}
 */
Bowling_bowling_SDK_v1_0.prototype.getPlayer = function getPlayer(id, options) {

    if (typeof id === 'object' && id !== null && typeof options === 'undefined') {
        options = id;
        id = undefined;
    }

    if (typeof id === 'undefined') {
        id = options && options.path && options.path['id'];
    }

    var opt = {
        url     : "/players/{id}",
        method  : "get",
        data    : (options && options.data) !== undefined ? options.data : {},
        params  : (options && options.query) !== undefined ? options.query : {},
        headers : (options && options.headers) !== undefined ? options.headers : {}
    };

    opt.url = opt.url.replace(/{id}/, id);

    return this.$request(opt);
};
